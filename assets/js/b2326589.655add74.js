"use strict";(self.webpackChunkaka_docs=self.webpackChunkaka_docs||[]).push([[497],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>h});var r=n(7294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,s=function(e,t){if(null==e)return{};var n,r,s={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var p=r.createContext({}),u=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},l=function(e){var t=u(e.components);return r.createElement(p.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,s=e.mdxType,a=e.originalType,p=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),c=u(n),m=s,h=c["".concat(p,".").concat(m)]||c[m]||d[m]||a;return n?r.createElement(h,o(o({ref:t},l),{},{components:n})):r.createElement(h,o({ref:t},l))}));function h(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var a=n.length,o=new Array(a);o[0]=m;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[c]="string"==typeof e?e:s,o[1]=i;for(var u=2;u<a;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},940:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>i,toc:()=>u});var r=n(7462),s=(n(7294),n(3905));const a={sidebar_position:1},o="Requests",i={unversionedId:"the-basic/request",id:"the-basic/request",title:"Requests",description:"The Requests page provides information on how the system handles HTTP requests using Express. Aka loads the",source:"@site/docs/the-basic/request.md",sourceDirName:"the-basic",slug:"/the-basic/request",permalink:"/aka.docs/docs/the-basic/request",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Middleware",permalink:"/aka.docs/docs/the-basic/middleware"}},p={},u=[{value:"GET requests",id:"get-requests",level:2},{value:"POST requests",id:"post-requests",level:2},{value:"PARAMS requests",id:"params-requests",level:2},{value:"MULTIPLE requests",id:"multiple-requests",level:2}],l={toc:u},c="wrapper";function d(e){let{components:t,...n}=e;return(0,s.kt)(c,(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"requests"},"Requests"),(0,s.kt)("p",null,"The Requests page provides information on how the system handles HTTP requests using Express. Aka loads the\nGET, POST, PATCH, and DELETE routes based on the constants exported in the routing files."),(0,s.kt)("h2",{id:"get-requests"},"GET requests"),(0,s.kt)("p",null,'you can define a constant named "get" which is equal to a function (preferably an arrow function) that takes three\nparameters: the req object of Express.js, the res object, and an optional next function.'),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js",metastring:"title=/route/example.js",title:"/route/example.js"},"export const $get = (req, res) => {\n\n    const {...data} = req.query; // get get params\n\n    res.json({\n        method: 'GET',\n        data: data,\n    })\n}\n")),(0,s.kt)("admonition",{type:"tip"},(0,s.kt)("p",{parentName:"admonition"},"The Requests explains how to handle GET requests using this method, as well as providing examples of how to use\nparameters and query strings in\nyour requests.")),(0,s.kt)("h2",{id:"post-requests"},"POST requests"),(0,s.kt)("p",null,'you can define a constant named "post" which is equal to a function (preferably an arrow function) that takes three\nparameters: the req object of Express.js, the res object, and an optional next function.'),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js",metastring:"title=/route/example.js",title:"/route/example.js"},"export const $post = (req, res) => {\n\n    const {...data} = req.body; // get post params\n\n    res.json({\n        method: 'POST',\n        data: data,\n    })\n}\n")),(0,s.kt)("admonition",{type:"tip"},(0,s.kt)("p",{parentName:"admonition"},"The Requests explains how to handle POST requests using this method, as well as providing examples of how to use\nparameters and query strings in\nyour requests.")),(0,s.kt)("h2",{id:"params-requests"},"PARAMS requests"),(0,s.kt)("p",null,'you can define a constant named "get" which is equal to a function (preferably an arrow function) that takes three\nparameters: the req object of Express.js, the res object, and an optional next function.'),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js",metastring:"title=/route/[example].js",title:"/route/[example].js"},"export const $get = (req, res) => {\n\n    const {example} = req.params; // get route params\n\n    res.json({\n        method: 'POST',\n        data: example,\n    })\n}\n")),(0,s.kt)("admonition",{type:"tip"},(0,s.kt)("p",{parentName:"admonition"},"The Requests explains how to handle PARAMS requests using this method, as well as providing examples of how to use\nparameters and query strings in\nyour requests.")),(0,s.kt)("h2",{id:"multiple-requests"},"MULTIPLE requests"),(0,s.kt)("admonition",{type:"important"},(0,s.kt)("p",{parentName:"admonition"},"Each file that is placed in the routes folder can support multiple HTTP methods in the same file. This is possible by\nexporting multiple constants that are functions with different method types (e.g. GET, POST, PUT, DELETE). These\nfunctions receive the Express request and response objects as arguments and can be named according to the desired route\npath. By using this approach, it is possible to define and manage all the routes for a specific resource in a single\nfile.")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"export const $post = (req, res) => {\n    res.json({\n        method: 'POST',\n    })\n}\n\nexport const $get = (req, res) => {\n    res.json({\n        method: 'POST',\n    })\n}\n\nexport const $put = (req, res) => {\n    res.json({\n        method: 'PUT',\n    })\n}\n\nexport const $delete = (req, res) => {\n    res.json({\n        method: 'PUT',\n    })\n}\n\nexport const $head = (req, res) => {\n    res.json({\n        method: 'HEAD',\n    })\n}\n\nexport const $options = (req, res) => {\n    res.json({\n        method: 'OPTIONS',\n    })\n}\n\nexport const $connect = (req, res) => {\n    res.json({\n        method: 'CONNECT',\n    })\n}\n\nexport const $trace = (req, res) => {\n    res.json({\n        method: 'TRACE',\n    })\n}\n\nexport const $patch = (req, res) => {\n    res.json({\n        method: 'PATCH',\n    })\n}\n")))}d.isMDXComponent=!0}}]);