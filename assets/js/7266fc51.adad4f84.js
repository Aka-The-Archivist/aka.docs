"use strict";(self.webpackChunkaka_docs=self.webpackChunkaka_docs||[]).push([[949],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>h});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),d=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},c=function(e){var t=d(e.components);return n.createElement(l.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),p=d(a),u=r,h=p["".concat(l,".").concat(u)]||p[u]||m[u]||i;return a?n.createElement(h,s(s({ref:t},c),{},{components:a})):n.createElement(h,s({ref:t},c))}));function h(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,s=new Array(i);s[0]=u;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[p]="string"==typeof e?e:r,s[1]=o;for(var d=2;d<i;d++)s[d]=a[d];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},6450:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>m,frontMatter:()=>i,metadata:()=>o,toc:()=>d});var n=a(7462),r=(a(7294),a(3905));const i={sidebar_position:2},s="Database ORM",o={unversionedId:"code-examples/prisma-js",id:"code-examples/prisma-js",title:"Database ORM",description:"\ud83d\ude80 [aka.backend] is designed to be highly extensible and customizable, and one of the ways to achieve this is",source:"@site/docs/code-examples/prisma-js.md",sourceDirName:"code-examples",slug:"/code-examples/prisma-js",permalink:"/aka.docs/docs/code-examples/prisma-js",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Json Web Token",permalink:"/aka.docs/docs/code-examples/json-web.token"},next:{title:"Atlas MongoDB",permalink:"/aka.docs/docs/code-examples/mongo-db"}},l={},d=[{value:"CodeSandbox repo CRUD",id:"codesandbox-repo-crud",level:2},{value:"Install prisma npm",id:"install-prisma-npm",level:2},{value:"Connecting your database",id:"connecting-your-database",level:2},{value:"Create first model for database",id:"create-first-model-for-database",level:2},{value:"Migrate model to table",id:"migrate-model-to-table",level:2},{value:"Create the first migration:",id:"create-the-first-migration",level:3},{value:"Create Database connection",id:"create-database-connection",level:2},{value:"Create your first user",id:"create-your-first-user",level:2},{value:"Composite middleware",id:"composite-middleware",level:3},{value:"Introspection",id:"introspection",level:2}],c={toc:d},p="wrapper";function m(e){let{components:t,...a}=e;return(0,r.kt)(p,(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"database-orm"},"Database ORM"),(0,r.kt)("p",null,"\ud83d\ude80 ",(0,r.kt)("strong",{parentName:"p"},"[aka.backend]")," is designed to be highly extensible and customizable, and one of the ways to achieve this is\nthrough integration with third-party libraries. One of the most popular options for building APIs in Node.js is Prisma,\na modern database toolkit that provides a type-safe API for your database schema."),(0,r.kt)("p",null,"Is Seamlessly integrates with Prisma, allowing you to use its powerful features to build robust and scalable APIs. With\nPrisma, you can easily generate a type-safe client for your database, perform complex queries, and even implement\nreal-time subscriptions."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases-node-mysql"},"OFFICIAL DOCUMENTATIONS")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"\ud83d\udcd6 This documentation page provides a guide on how to integrate ","[aka.backend]"," with Prisma, including step-by-step\ninstructions and code snippets."),(0,r.kt)("p",{parentName:"admonition"},"Whether you're building a new API from scratch or migrating an existing one to aka, this integration will help you\nstreamline your development process and deliver high-quality APIs\nfaster.")),(0,r.kt)("h2",{id:"codesandbox-repo-crud"},"CodeSandbox repo ","[CRUD]"),(0,r.kt)("p",null,"CodeSandbox is an online development platform that allows you to create, edit, and collaborate on web application\nprojects using popular web technologies such as React, Vue, Angular, and more. With CodeSandbox, you can quickly create\nsandbox environments where you can experiment with code, test your ideas, and share your work with others."),(0,r.kt)("iframe",{src:"https://codesandbox.io/embed/github/Aka-The-Archivist/aka.backend/prismajs?module=/main.js&autoresize=1&moduleview=1&hidenavigation=1&editorsize=65&expanddevtools=1&theme=dark&view=split&previewwindow=console",style:{width:"100%",height:"500px",border:"0",borderRadius:"8px",overflow:"hidden"}}),(0,r.kt)("h2",{id:"install-prisma-npm"},"Install prisma npm"),(0,r.kt)("p",null,"As a first step, navigate into your project directory that contains the package.json file."),(0,r.kt)("p",null,"Next, add the Prisma CLI as a development dependency to your project:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm install prisma --save-dev\n")),(0,r.kt)("p",null,"You can now invoke the Prisma CLI by prefixing it with npx:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npx prisma\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"See installation instructions to learn how to install Prisma using a different package manager.")),(0,r.kt)("p",null,"Next, set up your Prisma project by creating your Prisma schema file template with the following command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npx prisma init\n")),(0,r.kt)("p",null,"This command does two things:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"creates a new directory called prisma that contains a file called schema.prisma, which contains the Prisma schema with\nyour database connection variable and schema models"),(0,r.kt)("li",{parentName:"ul"},"creates the .env file in the root directory of the project, which is used for defining environment variables (such as\nyour database connection)")),(0,r.kt)("h2",{id:"connecting-your-database"},"Connecting your database"),(0,r.kt)("p",null,"To connect your database, you need to set the url field of the datasource block in your Prisma schema to your database\nconnection URL:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-prisma",metastring:"title=/prisma/schema.prisma",title:"/prisma/schema.prisma"},'datasource db {\n  provider = "mysql"\n  url      = env("DATABASE_URL")\n}\n')),(0,r.kt)("p",null,"In this case, the url is set via an environment variable which is defined in .env:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dotenv"},'DATABASE_URL="mysql://root:toor@localhost:3306/prisma"\n')),(0,r.kt)("h2",{id:"create-first-model-for-database"},"Create first model for database"),(0,r.kt)("p",null,"The data model now looks similar to this"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-prisma",metastring:"title=/prisma/schema.prisma",title:"/prisma/schema.prisma"},'generator client {\n  provider = "prisma-client-js"\n}\n\ndatasource db {\n  provider = "mysql"\n  url      = env("DATABASE_URL")\n}\n\nmodel User {\n  id        Int      @id @default(autoincrement())\n  name      String?  @db.VarChar(255)\n  email     String   @unique @db.VarChar(255)\n}\n')),(0,r.kt)("h2",{id:"migrate-model-to-table"},"Migrate model to table"),(0,r.kt)("p",null,"Prisma Migrate is an imperative database schema migration tool that enables you to:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Keep your database schema in sync with your Prisma schema as it evolves and"),(0,r.kt)("li",{parentName:"ul"},"Maintain existing data in your database")),(0,r.kt)("p",null,"Prisma Migrate generates a history of .sql migration files, and plays a role in both development and deployment."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"If you are prototyping, consider using the db push command - see Schema prototyping with db push for examples.")),(0,r.kt)("h3",{id:"create-the-first-migration"},"Create the first migration:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"prisma migrate dev\n")),(0,r.kt)("p",null,"Your Prisma schema is now in sync with your database schema and you have initialized a migration history:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'Environment variables loaded from .env\nPrisma schema loaded from prisma\\schema.prisma\n\nDatasource "db": MySQL database "prisma" at "localhost:3306"\n  migrations/\n    \u2514\u2500 20210313140442_init/\n    \u2514\u2500 migration.sql\n\n\u2714 Generated Prisma Client (4.13.0 | library) to .\\node_modules\\@prisma\\client in 49ms\n')),(0,r.kt)("h2",{id:"create-database-connection"},"Create Database connection"),(0,r.kt)("p",null,"Connection helper is a file that exports a global connection object to allow easy access to a database from\nanywhere in your application. With the connection helper, you can easily create, modify, and delete documents in your\ndatabase, and also perform more complex queries using the query language."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:"title=/helpers/database.js",title:"/helpers/database.js"},"import {PrismaClient} from \"@prisma/client\"\n\nconst env = process.env.NODE_ENV || 'development';\n\nexport let prisma = global.prisma || new PrismaClient(env !== '' ? {\n  log: [\n    'query',\n    // 'info',\n    'warn',\n    'error'\n  ],\n} : {})\n\nif (env !== 'production') global.prisma = prisma\n")),(0,r.kt)("p",null,"The helper simplifies the setup for your database and reduces boilerplate code in your application, allowing you to\nfocus on your core functionality."),(0,r.kt)("h2",{id:"create-your-first-user"},"Create your first user"),(0,r.kt)("p",null,"If you want to create a user in your application, you can start by creating a new file in the routes/users\ndirectory called create.js. In this file, you can write the code for the HTTP POST request handler that will receive the\nuser data from the client and create a new user in your database."),(0,r.kt)("p",null,"Here's an example of how you can write this handler using the Prisma ORM to interact with your database:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:"title=/users/create.js",title:"/users/create.js"},'import {prisma} from "../../helpers/database.js";\n\n/**\n *\n * @param req\n * @param res\n */\nexport default async function post(req, res) {\n\n    const {...data} = req.body; // get request params\n\n    // Create data model\n    const user = await prisma.user.create({\n        data: data,\n    })\n\n    res.json({\n        method: req.method,\n        data: user,\n    })\n}\n')),(0,r.kt)("p",null,"In this example, we first import the Prisma client instance from a database.js helper module. Then, we define an\nasynchronous function that takes the req and res objects as arguments. This function uses object destructuring to\nextract the user data from the request body and pass it as an argument to the prisma.user.create() method. Finally, we\nsend the new user data back to the client in the response."),(0,r.kt)("p",null,"You can customize this code to fit your specific use case, but this should give you a good starting point for creating a\nnew user in your Aka Backend application."),(0,r.kt)("h3",{id:"composite-middleware"},"Composite middleware"),(0,r.kt)("p",null,"This example shows how to create a custom middleware function for the /users/create endpoint that validates the incoming\ndata before allowing the request to proceed. The middleware function is defined in the middlewares/users/create.js file\nand is implemented as a composite middleware that combines multiple validation steps."),(0,r.kt)("p",null,"The first validation step checks if the request method is POST and if the required parameters name and email are present\nin the request body. If any of these conditions fails, the middleware returns a 422 Unprocessable Entity HTTP response\nwith an error message."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:"title=/middlewares/users/create.js",title:"/middlewares/users/create.js"},"import {prisma} from \"../../helpers/database.js\";\n\n/** @middleware\n |--------------------------------------------------------------------------\n | custom.js middleware\n |--------------------------------------------------------------------------\n |\n | In Express.js, a middleware function is a function that has access to the\n | request object (req), the response object (res), and the next middleware\n | function in the application's request-response cycle. A middleware function\n | can execute any code, modify the request and response objects, end the\n | request-response cycle, or call the next middleware function in the stack.\n |\n */\nexport default ['/users/create', async (req, res, next) => {\n\n    if (req.method === 'POST') {\n\n        // handle validation result first middleware\n        const {name, email} = req.body;\n\n        // required params body\n        if (!name || !email) return res.status(422).json({\n            name: 'required',\n            email: 'required',\n        })\n\n        // handle simple validation\n        if (!/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email)) return res.status(422).json({\n            email: 'not valid',\n        })\n\n        // check if unique\n        const user = await prisma.user.findUnique({where: {email}})\n\n        if (user) return res.status(422).json({\n            email: 'already taken',\n        })\n    }\n\n    next()\n}]\n")),(0,r.kt)("p",null,"The second validation step uses a regular expression to check if the email parameter is a valid email address. If the\nemail address is not valid, the middleware returns a 422 Unprocessable Entity HTTP response with an error message."),(0,r.kt)("p",null,"The final validation step checks if the email address is already taken by another user in the database. If the email\naddress is already in use, the middleware returns a 422 Unprocessable Entity HTTP response with an error message."),(0,r.kt)("p",null,"If all validation steps pass, the middleware calls the next() function to pass control to the next middleware function\nin the stack, or to the endpoint handler if no other middleware functions are defined."),(0,r.kt)("h2",{id:"introspection"},"Introspection"),(0,r.kt)("p",null,"Introspect your database with Prisma: ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/introspection-node-mysql"},"Introspect"))))}m.isMDXComponent=!0}}]);